"use strict";

var path = require('path');

var fs = require('fs'); // ./button-next => ./Button-next


var upperCaseFirstChar = function upperCaseFirstChar(str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
}; // ./Button-Next => ./ButtonNext


var formatToPascalCase = function formatToPascalCase(str) {
  return str.split('-').map(function (subStr) {
    return upperCaseFirstChar(subStr);
  }).join('');
};

var getDtsFilePath = function getDtsFilePath(componentPath) {
  return path.join(componentPath, 'index.d.ts');
};

var hasDtsFile = function hasDtsFile(componentPath) {
  return fs.existsSync(getDtsFilePath(componentPath));
};

var hasDefaultExport = function hasDefaultExport(componentPath) {
  var _require = require('@phenomnomnominal/tsquery'),
      tsquery = _require.tsquery;

  return tsquery(tsquery.ast(fs.readFileSync(getDtsFilePath(componentPath)).toString()), 'DefaultKeyword', {
    visitAllChildren: true
  }).length > 0;
};

module.exports = function (pathName, dts, options) {
  if (options === void 0) {
    options = {};
  }

  var componentsPath = path.resolve('dist', pathName);
  options.forcePascalCaseFormat = options.forcePascalCaseFormat || false;

  if (fs.existsSync(componentsPath)) {
    fs.readdirSync(componentsPath).map(function (name) {
      return [name, path.resolve(componentsPath, name)];
    }).filter(function (_ref) {
      var absolutePath = _ref[1];
      return fs.lstatSync(absolutePath).isDirectory() && fs.readdirSync(absolutePath).includes('index.js');
    }).map(function (_ref2) {
      var name = _ref2[0],
          absolutePath = _ref2[1];
      var componentPath = path.relative('./', absolutePath);
      name = options.forcePascalCaseFormat ? formatToPascalCase(name) : name;
      var files = [{
        path: "./" + name + ".js",
        source: "module.exports = require('./" + componentPath + "');\n"
      }];

      if (dts && hasDtsFile(componentPath)) {
        var codeLines = ["export * from './" + componentPath + "';"];

        if (hasDefaultExport(componentPath)) {
          codeLines.push("import defaultExport from './" + componentPath + "';");
          codeLines.push('export default defaultExport;');
        }

        files.push({
          path: "./" + name + ".d.ts",
          source: codeLines.join('\n') + '\n'
        });
      }

      return files;
    }).map(function (files) {
      return files.forEach(function (_ref3) {
        var path = _ref3.path,
            source = _ref3.source;
        fs.writeFileSync(path, source);
      });
    });
  }
};